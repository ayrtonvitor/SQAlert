/*
 * Use libcurl to send email to a predefined address.
 * For some reason, email sending is only available if the setting on gmail 
 * (the smtp server of choice) to allow connection from less secure apps is
 * enabled (https://www.google.com/settings/security/lesssecureapps).
 *
 * CA TLS certificates from https://curl.se/docs/caextract.html. Wasn't able
 * to get the certificates using openssl.
 *
 * Based on: https://curl.se/libcurl/c/smtp-tls.html
 *****************************************************************************/
#include "emailController.h"
#include <curl/curl.h>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iostream>
#include <string>

void composeMail(PriceAlert stock, SMTPSettings smtpSettings){
    /* Composese the email recommending buying or selling a given stock
     *
     * Parameters
     * ----------
     *  stock: PriceAlert struct containing the stock `ticker`, its `price`,
     *         the `time` which this price was recorded and the price under or
     *         over which this alert should be sent (`alertPrice`)
     *         according to an `action`.
     *
     *  smtpSettings: The settings for the SMTP server
     *
     * No Returns. The email generated is stored in ./cache/ to be used by
     * senEmail() function. */

    std::string subject { "(Stock Quote Alert) Alerta de " };
    std::string action = stock.action == "buy" ? "COMPRA" : "VENDA" ;
    subject += action + " do papel " + stock.ticker;

    std::time_t timeNow {time(0)};
    std::tm *ptm {std::localtime(&timeNow)};
    char timeStr[22];
    std::strftime(timeStr, 22, "%H:%M:%S (%d.%m.%Y)", ptm);
    std::string time{timeStr};

    std::string payload {"Date: "};
    payload += time + "\r\nTo: " + smtpSettings.toMail + "\r\n"
            + "From: " + smtpSettings.fromMail + "\r\nSubject: " + subject + "\r\n"
            + "\n\r" // headers end with empty line
            + "As " + stock.time + ", o preco do papel " + stock.ticker
            + " era " + std::to_string(stock.price) + ".\n\n\nAlerta de "
            + action
            + " adicionado para o preco de " + std::to_string(stock.alertPrice)
            + "\r\n\nStock Quote Alert.\r\n";

    std::ofstream file { "./cache/tempMail" };
    file << payload;
    file.flush();
    file.close();

}

void sendEmail(SMTPSettings settings) {
    /*Sends email to the configured receiver.
     *
     * Email content is generated by composeMail() and stored in a file 
     * in ./cache/ */

    CURL *curlHandle;
    CURLcode res{};
    curl_slist *recipients = NULL;

    curlHandle = curl_easy_init();
    if (curlHandle) {
        curl_easy_setopt(curlHandle, CURLOPT_USERNAME, 
                                (settings.senderUserName).c_str());
        curl_easy_setopt(curlHandle, CURLOPT_PASSWORD,
                                (settings.password).c_str()); 

        std::string urlStr { "smtp://" + settings.smtpServerURL + ":587" };
        const char *url { urlStr.c_str() };
        curl_easy_setopt(curlHandle, CURLOPT_URL, url);

        curl_easy_setopt(curlHandle, CURLOPT_USE_SSL, (long)CURLUSESSL_ALL);

        curl_easy_setopt(curlHandle, CURLOPT_CAINFO, 
                            (settings.pathCACertificate).c_str());

        curl_easy_setopt(curlHandle, CURLOPT_MAIL_FROM, 
                            (settings.fromMail).c_str());
        recipients = curl_slist_append(recipients, 
                            (settings.toMail).c_str()); //implemented to accept only one

        curl_easy_setopt(curlHandle, CURLOPT_MAIL_RCPT, recipients);

        std::FILE *file;
        //should implement a way to handle the case of file not openning
        file = fopen("./cache/tempMail", "r");
        curl_easy_setopt(curlHandle, CURLOPT_READDATA, file);
        curl_easy_setopt(curlHandle, CURLOPT_UPLOAD, 1L);

        try {
            res = curl_easy_perform(curlHandle); //send mail
            if (res == CURLE_LOGIN_DENIED) {
                throw "login denied";
            }
            else if(res != CURLE_OK){
                throw -1;
            }
        }
        catch (const char* loginDenied) {
            std::cout << "curl_easy_perform() failed: "
                << curl_easy_strerror(res) << '\n'
                << "Check if two factor authentication is disabled.\n";

            curl_slist_free_all(recipients);
            curl_easy_cleanup(curlHandle);
            std::exit(0);
        }
        catch (int){
            std::cout << "curl_easy_perform() failed: "
                << curl_easy_strerror(res) << '\n';

            curl_slist_free_all(recipients);
            curl_easy_cleanup(curlHandle);
            std::exit(0);
        }
    }
    curl_slist_free_all(recipients);
    curl_easy_cleanup(curlHandle);
}
